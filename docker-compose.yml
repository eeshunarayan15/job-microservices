version: '3.8'

services:
  # ==================== DATABASES ====================

  postgres-company:
    image: postgres:15-alpine
    container_name: postgres-company
    environment:
      POSTGRES_DB: companydb
      POSTGRES_USER: company_user
      POSTGRES_PASSWORD: company_pass
      TZ: UTC
      PGTZ: UTC
    ports:
      - "5432:5432"
    volumes:
      - company-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U company_user -d companydb"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-job:
    image: postgres:15-alpine
    container_name: postgres-job
    environment:
      POSTGRES_DB: jobdb
      POSTGRES_USER: job_user
      POSTGRES_PASSWORD: job_pass
      TZ: UTC
      PGTZ: UTC
    ports:
      - "5433:5432"
    volumes:
      - job-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U job_user -d jobdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-review:
    image: postgres:15-alpine
    container_name: postgres-review
    environment:
      POSTGRES_DB: reviewdb
      POSTGRES_USER: review_user
      POSTGRES_PASSWORD: review_pass
      TZ: UTC
      PGTZ: UTC
    ports:
      - "5434:5432"
    volumes:
      - review-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U review_user -d reviewdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== INFRASTRUCTURE ====================

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservices-net
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  zipkin:
    image: openzipkin/zipkin-slim
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net
    environment:
      - STORAGE_TYPE=mem

  # ==================== DISCOVERY & CONFIG ====================

  eureka-server:
    build:
      context: ./registry
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-net
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # ==================== MICROSERVICES ====================

  company-service:
    build:
      context: ./company
      dockerfile: Dockerfile
    depends_on:
      postgres-company:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-net
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-company:5432/companydb
      - SPRING_DATASOURCE_USERNAME=company_user
      - SPRING_DATASOURCE_PASSWORD=company_pass
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_RABBITMQ_HOST=rabbitmq
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  job-service:
    build:
      context: ./job
      dockerfile: Dockerfile
    depends_on:
      postgres-job:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-net
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-job:5432/jobdb
      - SPRING_DATASOURCE_USERNAME=job_user
      - SPRING_DATASOURCE_PASSWORD=job_pass
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_RABBITMQ_HOST=rabbitmq
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  review-service:
    build:
      context: ./reviews
      dockerfile: Dockerfile
    depends_on:
      postgres-review:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-net
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-review:5432/reviewdb
      - SPRING_DATASOURCE_USERNAME=review_user
      - SPRING_DATASOURCE_PASSWORD=review_pass
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_RABBITMQ_HOST=rabbitmq
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  api-gateway:
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8085:8085"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-net
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans

networks:
  microservices-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  company-data:
    driver: local
  job-data:
    driver: local
  review-data:
    driver: local
  rabbitmq-data:
    driver: local
  redis-data:
    driver: local