name: API Gateway CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apigateway/**'
      - '.github/workflows/apigateway-cicd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apigateway/**'

env:
  SERVICE_NAME: apigateway
  DOCKER_IMAGE: eeshunarayan15/apigateway

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build JAR with Gradle
        run: |
          cd ${{ env.SERVICE_NAME }}
          chmod +x gradlew
          ./gradlew clean bootJar --no-daemon

      - name: Test with Gradle
        run: |
          cd ${{ env.SERVICE_NAME }}
          ./gradlew test --no-daemon

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.SERVICE_NAME }}
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:main-${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
          cache-to: type=inline

  deploy:
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Render Deployment
        run: |
          curl -X POST \
            "https://api.render.com/v1/services/${{ secrets.RENDER_APIGATEWAY_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json"

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for API Gateway service to be healthy..."
          for i in {1..30}; do
            if curl -f "${{ secrets.RENDER_APIGATEWAY_URL }}/actuator/health" >/dev/null 2>&1; then
              echo "✅ API Gateway is healthy!!!!"
              exit 0
            fi
            echo "⏳ Attempt $i/30: Service not ready yet. Waiting 10 seconds..."
            sleep 10
          done
          echo "❌ Service failed to become healthy"
          exit 1

      - name: Health Check
        run: |
          echo "Running final health check..."
          response=$(curl -s "${{ secrets.RENDER_APIGATEWAY_URL }}/actuator/health")
          echo "Health Response: $response"
          
          if echo "$response" | grep -q '"status":"UP"'; then
            echo "✅ Health check passed!"
          else
            echo "❌ Health check failed!"
            exit 1
          fi