# ============================================
# Render-Specific Configuration
# ============================================
# This file is activated when SPRING_PROFILES_ACTIVE=render
# All values use environment variables set in Render dashboard

# ============================================
# Application Configuration
# ============================================
spring.application.name=COMPANY

# ============================================
# Server Configuration
# ============================================
server.port=${PORT:8081}
server.servlet.context-path=/api/v1

# ============================================
# Microservice URLs (Render)
# ============================================
job-service.url=https://job-SERVICE_ID.onrender.com
company-service.url=https://company-SERVICE_ID.onrender.com
review-service.url=https://review-SERVICE_ID.onrender.com

# ============================================
# Database Configuration (Supabase)
# ============================================
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.database-platform=${SPRING_JPA_DATABASE_PLATFORM:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# HikariCP Configuration - Optimized for Render Free Tier
spring.datasource.hikari.maximum-pool-size=3
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.connection-test-query=SELECT 1

# SSL Configuration for Supabase
spring.datasource.hikari.data-source-properties.ssl=true
spring.datasource.hikari.data-source-properties.sslmode=require

# ============================================
# Eureka Client Configuration
# ============================================
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}

# Eureka Instance Configuration for HTTPS
eureka.instance.hostname=${RENDER_EXTERNAL_HOSTNAME:company}
eureka.instance.prefer-ip-address=false
eureka.instance.non-secure-port-enabled=false
eureka.instance.secure-port-enabled=true
eureka.instance.secure-port=${PORT:8081}
eureka.instance.instance-id=${spring.application.name}:${RENDER_EXTERNAL_HOSTNAME:localhost}:${PORT:8081}
eureka.instance.home-page-url=https://${RENDER_EXTERNAL_HOSTNAME:localhost}${server.servlet.context-path:/}
eureka.instance.status-page-url=https://${RENDER_EXTERNAL_HOSTNAME:localhost}/actuator/info
eureka.instance.health-check-url=https://${RENDER_EXTERNAL_HOSTNAME:localhost}/actuator/health

# Eureka Client Health Check
eureka.client.healthcheck.enabled=true
eureka.client.registry-fetch-interval-seconds=30
eureka.client.instance-info-replication-interval-seconds=30

# ============================================
# Config Server (Optional)
# ============================================
spring.config.import=optional:configserver:https://configserver-SERVICE_ID.onrender.com/

# ============================================
# RabbitMQ Configuration (CloudAMQP)
# ============================================
spring.rabbitmq.addresses=${SPRING_RABBITMQ_ADDRESSES}

# RabbitMQ Connection Settings
spring.rabbitmq.connection-timeout=30000
spring.rabbitmq.requested-heartbeat=30
#spring.rabbitmq.connection-timeout=10000

# ============================================
# Actuator Configuration
# ============================================
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true

# ============================================
# Distributed Tracing Configuration
# ============================================
management.tracing.enabled=${MANAGEMENT_TRACING_ENABLED:false}
management.tracing.sampling.probability=0.1
management.zipkin.tracing.endpoint=${MANAGEMENT_ZIPKIN_TRACING_ENDPOINT:}

# ============================================
# Logging Configuration
# ============================================
logging.level.root=INFO
logging.level.com.micro.company=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.org.springframework.web=INFO
logging.level.org.springframework.cloud.netflix.eureka=INFO

# Logging Pattern
logging.pattern.console=%clr(%d{HH:mm:ss.SSS}){faint} %clr(%-5level) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx

# ============================================
# Performance & Resource Optimization
# ============================================
# Enable lazy initialization for faster startup
spring.main.lazy-initialization=false

# Reduce Tomcat threads for free tier
server.tomcat.threads.max=10
server.tomcat.threads.min-spare=2
server.tomcat.accept-count=10
server.tomcat.max-connections=50

# Connection keep-alive
server.tomcat.connection-timeout=60000
server.tomcat.keep-alive-timeout=60000
server.tomcat.max-keep-alive-requests=100

# ============================================
# Security & Production Settings
# ============================================
# Disable banner in production
spring.main.banner-mode=off

# Error handling
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=on_param
server.error.include-exception=false

# ============================================
# Additional Production Settings
# ============================================
# Graceful shutdown
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s

# File upload limits (if needed)
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB