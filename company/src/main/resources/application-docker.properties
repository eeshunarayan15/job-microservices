# Application Configuration
spring.application.name=COMPANY
logging.pattern.console=%clr(%d{HH:mm:ss.SSS}){faint} %clr(%-5level) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx


server.servlet.context-path=/api/v1
job-service.url=http://job:8082
company-service.url=http://company:8081
review-service.url=http://review:8083



spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Logging
logging.level.org.hibernate.SQL=DEBUG

# Actuator
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*



# Distributed Tracing
management.tracing.sampling.probability=0.1
management.tracing.enabled=true
















server.port=8081

# Eureka Client
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/

# Eureka Instance - Crucial for Docker Networking
eureka.instance.hostname=company
eureka.instance.prefer-ip-address=false
eureka.instance.instance-id=${spring.application.name}:${eureka.instance.hostname}:${server.port}

# Config Server
spring.config.import=optional:configserver:http://configserver:8088/

# ----------------------------
# PostgreSQL Database (Docker Service Name)
# ----------------------------
spring.datasource.url=jdbc:postgresql://companydb:5432/companydb
spring.datasource.username=companyuser
spring.datasource.password=companypass
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# ----------------------------
# Messaging (RabbitMQ) Configuration
# ----------------------------
# The hostname 'rabbitmq' must match the service name in docker-compose.yml
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# ----------------------------
# Distributed Tracing (Zipkin/Sleuth) Configuration
# ----------------------------
# Assuming Spring Boot 3+ (Micrometer Tracing) or Spring Cloud Sleuth is used.
# The endpoint 'zipkin' must match the service name in docker-compose.yml
management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans

