# Application Configuration
spring.application.name=JOB
server.port=8082
server.servlet.context-path=/api/v1
job-service.url=http://job:8082
company-service.url=http://company:8081
review-service.url=http://review:8083


# Database Configuration - Uses the 'jobdb' Docker service
spring.datasource.url=jdbc:postgresql://jobdb:5432/jobdb
spring.datasource.username=jobuser
spring.datasource.password=jobpass
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Logging
logging.level.org.hibernate.SQL=DEBUG
spring.output.ansi.enabled=ALWAYS
logging.pattern.console=%clr(%d{HH:mm:ss.SSS}){faint} %clr(%-5level) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx

# Actuator
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health
management.health.circuitbreakers.enabled=true

# Eureka Client - Uses the 'eureka-server' Docker service name
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/

# Eureka Instance - Crucial for Docker Networking
eureka.instance.hostname=job
eureka.instance.prefer-ip-address=false
eureka.instance.instance-id=${spring.application.name}:${eureka.instance.hostname}:${server.port}

# Distributed Tracing
management.tracing.sampling.probability=0.1
management.tracing.enabled=true

# Config Server - Uses the 'configserver' Docker service name
#spring.config.import=optional:configserver:http://configserver:8088



#Zipkin - Uses the 'zipkin' Docker service name
management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans

# Resilience4J Circuit Breaker (Configuration untouched, but provided for completeness)
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-size=10
resilience4j.circuitbreaker.instances.companyBreaker.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.companyBreaker.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.companyBreaker.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.companyBreaker.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based

# Resilience4J Retry
resilience4j.retry.instances.companyBreaker.max-attempts=3
resilience4j.retry.instances.companyBreaker.wait-duration=500ms
logging.level.io.github.resilience4j.retry=DEBUG
logging.level.io.github.resilience4j=DEBUG

# Rate Limiter
resilience4j.ratelimiter.instances.companyRateLimiter.timeout-duration=0s
resilience4j.ratelimiter.instances.companyRateLimiter.limit-refresh-period=1s
resilience4j.ratelimiter.instances.companyRateLimiter.limit-for-period=10
#Rabbit MQ - Uses the 'rabbitmq' Docker service name
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
spring.rabbitmq.password=guest